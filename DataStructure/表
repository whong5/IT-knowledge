Collection 接口
public interface Collection<AnyType> extends Iterable<AnyType>
{
	int size();
	boolean isEmpty();
	void clear();
	boolean contains(AnyType x);
	boolean add(AnyType x);
	boolean remove(AnyYype x);
	java.util.Iterator<AnyType> iterator();
}

List 接口
public interface List<AnyType> extends Collection<AnyType>
{
	AnyType get(int idx);
	AnyType set(int idx, AnyType x);
	void add(int idx, AnyType x);
	void remove(int idx);
	
	ListIterator<AnyType> listIterator(int pos);
}

数组(array)：删除插入元素难，searching相对简单。 trimToSize function 可以在添加完元素后释放不需要的部分，节省空间
链表(Linked-list): 
    public static void main(String[] args) {
        LinkedList<Integer> list = new LinkedList();
        makeList1(list, 8); // a function that make a list [0,8]
        int i = 0;
        while (i < list.size()) {
            // get操作是低效的
            if (list.get(i) % 2 == 0) {
                // 同时remove也一样，本身可以记住定位
                // 的元素，没有必要再次遍历
                list.remove(i);
            } else {
                i++;
            }
        }
        for (int x : list) System.out.println(x);
    }
以下方法则可以避免重复的遍历，而array就不具有这样的特性，即使iterator能记住当前位置，remove操作仍然要移动array大部分元素的位置
    public static void main(String[] args) {
        LinkedList<Integer> list = new LinkedList();
        makeList1(list, 8); // a function that make a list [0,8]
        
        Iterator<Integer> itr = list.iterator();
        while (itr.hasNext()) {
            if (itr.next() % 2 == 0) {
                itr.remove();
            }
        }
        
        for (int x : list) System.out.println(x);
    }
