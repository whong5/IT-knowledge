Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

C++:
vector<int> two_sum(vector<int> &nums, int target) {
    map<int, int> imap;
    for (int i = 0; i != nums.size(); i++) {
        int comp = target - nums[i];
        if (imap.count(comp) && imap[comp] != i) {
            return vector<int> { i, imap[comp] };
        } else {
            imap[nums[i]] = i;
        }
    }
}

Java:
public int[] two_sum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap();
    for (int i = 0; i < nums.length; i++) {
        int comp = target - nums[i];
        if (map.containsKey(comp)) return new int[] { map.get(comp), i };
        map.put(nums[i], i);
    }
}
